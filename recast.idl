interface rcConfig {
    void rcConfig();
    
    /// The width of the field along the x-axis. [Limit: >= 0] [Units: vx]
	attribute long width;

	/// The height of the field along the z-axis. [Limit: >= 0] [Units: vx]
	attribute long height;
	
	/// The width/height size of tile's on the xz-plane. [Limit: >= 0] [Units: vx]
	attribute long tileSize;
	
	/// The size of the non-navigable border around the heightfield. [Limit: >=0] [Units: vx]
	attribute long borderSize;

	/// The xz-plane cell size to use for fields. [Limit: > 0] [Units: wu] 
	attribute float cs;

	/// The y-axis cell size to use for fields. [Limit: > 0] [Units: wu]
	attribute float ch;

	/// The minimum bounds of the field's AABB. [(x, y, z)] [Units: wu]
	attribute float[] bmin; 

	/// The maximum bounds of the field's AABB. [(x, y, z)] [Units: wu]
	attribute float[] bmax;

	/// The maximum slope that is considered walkable. [Limits: 0 <= value < 90] [Units: Degrees] 
	attribute float walkableSlopeAngle;

	/// Minimum floor to 'ceiling' height that will still allow the floor area to 
	/// be considered walkable. [Limit: >= 3] [Units: vx] 
	attribute long walkableHeight;
	
	/// Maximum ledge height that is considered to still be traversable. [Limit: >=0] [Units: vx] 
	attribute long walkableClimb;
	
	/// The distance to erode/shrink the walkable area of the heightfield away from 
	/// obstructions.  [Limit: >=0] [Units: vx] 
	attribute long walkableRadius;
	
	/// The maximum allowed length for contour edges along the border of the mesh. [Limit: >=0] [Units: vx] 
	attribute long maxEdgeLen;
	
	/// The maximum distance a simplfied contour's border edges should deviate 
	/// the original raw contour. [Limit: >=0] [Units: vx]
	attribute float maxSimplificationError;
	
	/// The minimum number of cells allowed to form isolated island areas. [Limit: >=0] [Units: vx] 
	attribute long minRegionArea;
	
	/// Any regions with a span count smaller than this value will, if possible, 
	/// be merged with larger regions. [Limit: >=0] [Units: vx] 
	attribute long mergeRegionArea;
	
	/// The maximum number of vertices allowed for polygons generated during the 
	/// contour to polygon conversion process. [Limit: >= 3] 
	attribute long maxVertsPerPoly;
	
	/// Sets the sampling distance to use when generating the detail mesh.
	/// (For height detail only.) [Limits: 0 or >= 0.9] [Units: wu] 
	attribute float detailSampleDist;
	
	/// The maximum distance the detail mesh surface should deviate from heightfield
	/// data. (For height detail only.) [Limit: >=0] [Units: wu] 
	attribute float detailSampleMaxError;
};

interface Vec3 {
	void Vec3();
 	float x();
  	float y();
  	float z();
};

interface Triangle {
	void Triangle();
	[Const, Ref] Vec3 GetPoint(long n);
};

interface DebugNavMesh {
	void DebugNavMesh();
	long TriangleCount();
	[Const, Ref] Triangle GetTriangle(long n);
};

interface NavMesh {
    void NavMesh();
    void Build([Const] float[] positions, [Const] long positionCount, [Const] long[] indices, [Const] long indexCount, [Const, Ref] rcConfig config);
	[Const, Ref] DebugNavMesh GetDebugNavMesh();
};


